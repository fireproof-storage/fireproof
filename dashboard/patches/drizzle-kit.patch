diff --git a/bin.cjs b/bin.cjs
index 70941f2a5aec6dcd1218e8a699fb5aafb4025f35..58bf4ca4d4347371e16339ca2e0b32f64c36788c 100755
--- a/bin.cjs
+++ b/bin.cjs
@@ -20406,27 +20406,26 @@ ${withStyle.errorWarning(
     fromDatabase3 = async (db, tablesFilter = (table6) => true, progressCallback) => {
       const result = {};
       const resultViews = {};
+      const ignoreTableNames = `NOT IN (
+		'sqlite_sequence',
+		'_litestream_seq',
+		'_litestream_lock',
+		'libsql_wasm_func_table',
+		'__drizzle_migrations',
+		'_cf_KV')`;
       const columns = await db.query(
         `SELECT 
     m.name as "tableName", p.name as "columnName", p.type as "columnType", p."notnull" as "notNull", p.dflt_value as "defaultValue", p.pk as pk, p.hidden as hidden, m.sql, m.type as type
     FROM sqlite_master AS m JOIN pragma_table_xinfo(m.name) AS p
-    WHERE (m.type = 'table' OR m.type = 'view')
-    and m.tbl_name != 'sqlite_sequence' 
-    and m.tbl_name != 'sqlite_stat1' 
-    and m.tbl_name != '_litestream_seq' 
-    and m.tbl_name != '_litestream_lock' 
-    and m.tbl_name != 'libsql_wasm_func_table' 
-    and m.tbl_name != '__drizzle_migrations' 
-    and m.tbl_name != '_cf_KV';
+    WHERE (m.type = 'table' OR m.type = 'view') 
+	AND m.tbl_name ${ignoreTableNames};
     `
       );
       const tablesWithSeq = [];
       const seq = await db.query(
         `SELECT * FROM sqlite_master WHERE name != 'sqlite_sequence' 
-    and name != 'sqlite_stat1' 
-    and name != '_litestream_seq' 
-    and name != '_litestream_lock' 
-    and tbl_name != '_cf_KV' 
+    and name ${ignoreTableNames}
+    and tbl_name ${ignoreTableNames}
     and sql GLOB '*[ *' || CHAR(9) || CHAR(10) || CHAR(13) || ']AUTOINCREMENT[^'']*';`
       );
       for (const s2 of seq) {
@@ -20526,7 +20525,7 @@ ${withStyle.errorWarning(
         const fks = await db.query(
           `SELECT m.name as "tableFrom", f.id as "id", f."table" as "tableTo", f."from", f."to", f."on_update" as "onUpdate", f."on_delete" as "onDelete", f.seq as "seq"
       FROM sqlite_master m, pragma_foreign_key_list(m.name) as f 
-      where m.tbl_name != '_cf_KV';`
+      where m.tbl_name ${ignoreTableNames};`
         );
         const fkByTableName = {};
         for (const fkRow of fks) {
@@ -20587,7 +20586,7 @@ FROM sqlite_master AS m,
 WHERE 
     m.type = 'table' 
     and il.name NOT LIKE 'sqlite_autoindex_%'
-    and m.tbl_name != '_cf_KV';`
+    and m.tbl_name ${ignoreTableNames};`
       );
       for (const idxRow of idxs) {
         const tableName = idxRow.tableName;
@@ -20650,7 +20649,7 @@ WHERE
       const checkConstraints = {};
       const checks = await db.query(`SELECT name as "tableName", sql as "sql"
 		FROM sqlite_master 
-		WHERE type = 'table' AND name != 'sqlite_sequence';`);
+		WHERE type = 'table' AND name ${ignoreTableNames};`);
       for (const check2 of checks) {
         if (!tablesFilter(check2.tableName))
           continue;
@@ -82010,18 +82009,17 @@ var init_push = __esm({
           (0, import_hanji13.render)(`
 [${source_default.blue("i")}] No changes detected`);
         } else {
-          if (!("driver" in credentials2)) {
-            await db.run("begin");
-            try {
-              for (const dStmnt of statementsToExecute) {
-                await db.run(dStmnt);
-              }
-              await db.run("commit");
-            } catch (e2) {
-              console.error(e2);
-              await db.run("rollback");
-              process.exit(1);
+          const isNotD1 = !("driver" in credentials2 && credentials2.driver === "d1-http");
+          isNotD1 ?? await db.run("begin");
+          try {
+            for (const dStmnt of statementsToExecute) {
+              await db.run(dStmnt);
             }
+            isNotD1 ?? await db.run("commit");
+          } catch (e2) {
+            console.error(e2);
+            isNotD1 ?? await db.run("rollback");
+            process.exit(1);
           }
           (0, import_hanji13.render)(`[${source_default.green("\u2713")}] Changes applied`);
         }
