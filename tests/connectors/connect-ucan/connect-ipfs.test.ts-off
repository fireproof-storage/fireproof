import { assert, equals, notEquals, matches, resetDirectory, equalsJSON } from "../../helpers.js";
import { Database } from "../../../src/index.js";
import { connect } from "../../../src/connectors/connect-ipfs/index.js";
// import { Doc } from '../dist/test/types.d.esm.js'
import { MetaStore } from "../../fireproof/dist/test/store-fs.esm.js";
import { join } from "path";
import { promises as fs } from "fs";
import { type } from "os";
import { ConnectUCAN } from "../../../src/connectors/connect-ucan/connect-ucan.js";
import { Connection } from "../../../src/storage-engine/index.js";
const { readFile, writeFile } = fs;

const mockStore = new Map();

class MockConnect extends Connection {
  async metaUpload(bytes, { name, branch }) {
    const key = new URLSearchParams({ name, branch }).toString();
    mockStore.set(key, bytes);
  }

  async dataUpload(bytes, { type, name, car }) {
    const key = new URLSearchParams({ type, name, car }).toString();
    mockStore.set(key, bytes);
  }

  async metaDownload({ name, branch }) {
    const key = new URLSearchParams({ name, branch }).toString();
    if (!mockStore.has(key)) return null;
    return [mockStore.get(key)];
  }
  async dataDownload({ type, name, car }) {
    const key = new URLSearchParams({ type, name, car }).toString();
    return mockStore.get(key);
  }
};

const mockConnect = new MockConnect();

describe("connect ipfs", function () {
  let cx: ConnectUCAN;
  let db: Database;
  let dbName: string;
  beforeEach(async function () {
    dbName = "test-raw-connect";
    await resetDirectory(MetaStore.dataDir, dbName);
    mockStore.clear();
    db = new Database(dbName);
    cx = connect.ucan(db, "my-schema");
  });
  it("should have an awaitable ready", function () {
    assert(cx);
    assert(cx.ready);
    assert.equal(typeof cx.ready.then, "function");
  });
  it("should have an awaitable authorizing", function () {
    assert(cx);
    assert(cx.authorizing);
  });
});
