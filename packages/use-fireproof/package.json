{
  "name": "use-fireproof",
  "version": "0.20",
  "description": "Fireproof live ledger, JavaScript API and React hooks",
  "type": "module",
  "homepage": "https://use-fireproof.com",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fireproof-storage/fireproof.git"
  },
  "bugs": {
    "url": "https://github.com/fireproof-storage/fireproof/issues"
  },
  "types": "./dist/src/index.d.ts",
  "exports": {
    ".": {
      "types": "./dist/src/index.d.ts",
      "import": "./dist/src/index.js"
    }
  },
  "scripts": {
    "build": "tsc --build",
    "clean": "rm -rf dist",
    "check-format": "prettier src tests --config ../../.prettierrc --check",
    "check-lint": "eslint src tests",
    "lint": "npm run check-format && npm run check-lint",
    "test": "vitest --run"
  },
  "author": "J Chris Anderson",
  "license": "Apache-2.0 OR MIT",
  "gptdoc": "Fireproof/React/Usage: import { useLiveQuery, useDocument } from 'use-fireproof'; function App() { const result = useLiveQuery(doc => doc.word, { limit: 10 }); const [{ count }, setDoc, saveDoc] = useDocument({_id: 'count', count: 0}); return (<><p>{count} changes</p><input type='text' onChange={() => saveDoc({count: count + 1})} onSubmit={e => useLiveQuery.ledger.put({word: e.target.value})} /><ul>{result.map(row => (<li key={row.id}>{row.key}</li>))}</ul></>)}",
  "dependencies": {
    "@fireproof/core": "workspace:../core",
    "react": "^19.0.0"
  },
  "devDependencies": {
    "@testing-library/dom": "^10.4.0",
    "@testing-library/react": "^16.2.0",
    "@types/react": "^19.0.0",
    "jsdom": "^26.0.0",
    "prettier": "^3.4.2",
    "typescript": "^5.7.3",
    "vitest": "^3.0.3"
  },
  "peerDependencies": {
    "react-dom": "^19.0.0"
  },
  "keywords": [
    "react",
    "ledger",
    "json",
    "live",
    "sync"
  ]
}
